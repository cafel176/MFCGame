#pragma once

#ifndef MAP_H
#define MAP_H

//地图尺寸
#define X 15
#define Y 23

//格式，nxy，各占2位。nxy都从0起，但全为0则不贴。例20130，即2号图的x=1,y=30号图块
//地板图块
int floorArray[X][Y] = {
{ 0,0,51600,51602,51606,12826,12827,12827,12827,12828,14,15,15,15,15,15,16,11722,11724,13026,13027,13028,0 },
{0,0,51800,51802,51806,12926,12927,12927,12927,12928,114,115,115,115,115,115,116,11722,0,11623,11623,11623,11624 },
{0,0,51600,51602,51606,12926,12927,12927,12927,12928,214,215,215,215,215,215,216,11822,11823,11823,11823,0,11724 },
{0,0,51800,51802,51806,13026,13027,13027,13027,13028,21012,20412,20414,20412,20414,20412,20414,20412,20414,20412,20414,11722,11724 },
{0,0,0,0,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,11822,0 },
{0,0,32004,32006,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,11822 },
{0,0,0,0,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309 },
{0,0,0,0,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309 },
{0,0,0,0,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309 },
{0,0,32804,32806,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,11622 },
{0,0,0,0,0,0,0,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,1309,11622,0},
{ 0,0,51600,51602,51606,12826,12827,12827,12827,12828,21012,20412,20414,20412,20414,20412,20414,20412,20414,20412,20414,11722,11724 },
{ 0,0,51800,51802,51806,12926,12927,12927,12927,12928,14,15,15,15,15,15,16,11622,11623,11623,11623,0,11724 },
{ 0,0,51600,51602,51606,12926,12927,12927,12927,12928,114,115,115,115,115,115,116,11722,0,11823,11823,11823,11824 },
{ 0,0,51800,51802,51806,13026,13027,13027,13027,13028,214,215,215,215,215,215,216,11722,11724,12826,12827,12828,0}
};
//覆盖物图块
int coverArray[X][Y] = {
	{ 0,0,0,0,0,60306,60307,0,0,40807,40808,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,30011,30012,30013,30014,0,41004,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,0,0,40805,40806,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,30011,30012,30013,30014,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 30900,30901,30902,30903,30904,30905,30906,30907,30908,30909,30910,30911,0,0,0,0,0,0,0,0,0,0,0 },
	{ 31000,31001,90102,90103,31004,31005,31006,31007,31008,31009,31010,31011,0,0,50014,0,50014,0,50014,0,0,0,0 },
	{ 31100,31101,31102,31103,31104,31105,31106,31107,31108,31109,31110,31111,0,0,50114,0,50114,0,50114,0,0,0,0 },
	{ 31200,31201,31202,31203,31204,31205,31206,31207,31208,31209,31210,31211,40801,0,0,0,0,0,0,0,0,0,0 },
	{ 31300,31301,31302,31303,31304,31305,31306,31307,31308,31309,31310,31311,0,0,50014,0,50014,0,50014,0,0,0,0 },
	{ 31400,31401,90104,90105,31404,31405,31406,31407,31408,31409,31410,31411,0,0,50114,0,50114,0,50114,0,0,0,0 },
	{ 31500,31501,31502,31503,31504,31505,31506,31507,31508,31509,31510,31511,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,30011,30012,30013,30014,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,0,0,40907,40908,0,0,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,30011,30012,30013,30014,0,41004,0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,60306,60307,0,0,41007,41008,0,0,0,0,0,0,0,0,0,0,0,0 }
};

//碰撞检测矩阵
//0表示可以通行，1表示不可
int blockArray[X][Y] = {
	{ 1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1 },
	{ 1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,1 },
	{ 1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1 },
	{ 1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0 },
	{ 1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0 },
	{ 1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0 },
	{ 1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1 },
	{ 1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1 }
};

//0-A2,1-A4,2-A5,3-B,4-C,5-D,6-E,7-fire,8-piano,9-K,10-ray
//0是底层，1是覆盖物，传入地图坐标，返回贴图号，传出贴图uv
int getPos(int type,int &x,int &y) {
	int r;
	try {
		if (type == 0)//铺地板，以16位最小单位
			r = floorArray[x][y];
		else//覆盖物，以32为最小单位
			r = coverArray[x][y];
	}
	catch (int l) {
		return -1;//返回-1，不贴
	}

	if (r <= 0)
		return -1;//返回-1，不贴

	y = r % 100;
	x = (r / 100)%100;
	return r / 10000;
}

//用于播放动画的类
class Anima {
private:
	//总帧数行列
	int numr, numc;
	//bitmap中的总位置(左上角)
	int x, y;
	//当前帧行列
	int nowr = 0, nowc = 0;
	int change = 1;

public:
	//在地图上的位置(左上角)
	int posx, posy;
	//动画单帧的宽高
	int width, height;
	//bitmap序号
	int n;
	//bitmap中的当前帧位置(左上角)
	int nowx, nowy;

	Anima(int posx, int posy, int width, int height, int n, int x, int y,
		int numr = 1, int numc = 3, int nowc = 0, int nowr = 0)
	{
		this->posx = posx;
		this->posy = posy;
		this->width = width;
		this->height = height;
		this->n = n;
		this->x = x;
		this->y = y;
		this->numr = numr;
		this->numc = numc;
		this->nowr = nowr;
		this->nowc = nowc;

		nowx = x + nowc*width;
		nowy = y + nowr*height;
	}

	//切换到下一帧
	void nextFrame()
	{
		nowc += change;
		if (nowc == numc - 1 || nowc == 0)
			change *= -1;
		nowx = x + nowc*width;
	}

	//切换到指定帧序列
	void changeRow(int row)
	{
		if (row!=nowr && row < numr && row >= 0) {
			nowc = 0; change = 1;
			nowx = x + nowc*width;
			nowr = row;
			nowy = y + nowr*height;
		}
	}

	//改变物体的屏幕相对位置
	void changePos(int x, int y) {
		posx += x;
		posy += y;
	}
};

Anima anima[] = {
	{ 6,5,1,2,10,0,8,4,3,1 },//ray
	{ 4, 9, 1, 2, 7, 6, 12 },//地灯
	{4, 13, 1, 2, 7, 6, 12},
	{ 4, 15, 1, 2, 7, 6, 12 },
	{ 4, 17, 1, 2, 7, 6, 12 },
	{ 5, 20, 1, 2, 7, 6, 12 },
	{ 10, 9, 1, 2, 7, 6, 12 },
	{ 10, 13, 1, 2, 7, 6, 12 },
	{ 10, 15, 1, 2, 7, 6, 12 },
	{ 10, 17, 1, 2, 7, 6, 12 },
	{ 9, 20, 1, 2, 7, 6, 12 },
	{ 0, 6, 1, 2, 7, 3, 10 },//烛台
	{ 2, 6, 1, 2, 7, 3, 10 },
	{ 1, 3, 1, 2, 7, 6, 4 },
	{ 2, 3, 1, 2, 7, 6, 4 },
	{ 12, 6, 1, 2, 7, 3, 10 },
	{ 14, 6, 1, 2, 7, 3, 10 },
	{ 12, 3, 1, 2, 7, 6, 4 },
	{ 13, 3, 1, 2, 7, 6, 4 },
	{ 7, 0, 1, 2, 7, 6, 14 },//挂灯
	{ 6, 9, 3, 2, 8, 0, 0 }//钢琴
};

#endif